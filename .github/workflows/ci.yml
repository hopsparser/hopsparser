name: Continuous integration

on:
  push:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      deploy_trigger:
        description: Force a deployment to PyPI
        default: "false"
        required: true
env:
  FORCE_COLOR: "1"

jobs:
  lint:
    strategy:
      matrix:
        os:
          - ubuntu-latest
        python-version:
          - "3.14"
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v5

      - name: Install uv
        uses: astral-sh/setup-uv@v7
        with:
          cache-suffix: lint-py${{ matrix.python-version }}-${{ matrix.os }}
          enable-cache: true
      - name: Lint with ruff
        run: |
          uv tool install ruff --python ${{ matrix.python-version }}
          # stop the build if there are Python syntax errors or undefined names
          ruff check . --select=E9,F63,F7,F82 --output-format=github
          # exit-zero treats all errors as warnings.
          ruff check . --exit-zero --output-format=github
  test:
    needs: lint
    runs-on: ${{ matrix.os }}
    strategy:
      max-parallel: 4
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
        python-version:
          - "3.11"
          - "3.12"
          - "3.13"
    steps:
      - uses: actions/checkout@v5
      - name: Install uv
        uses: astral-sh/setup-uv@v7
        with:
          cache-suffix: test-py${{ matrix.python-version }}-${{ matrix.os }}
          enable-cache: true
      - name: Create base venv
        run: uv venv --python ${{ matrix.python-version }}
      - name: Get transformers and cache
        id: transfo-install
        run: |
          source .venv/bin/activate
          uv pip install --upgrade transformers
          python -c "from transformers.file_utils import TRANSFORMERS_CACHE; print(f'dir={TRANSFORMERS_CACHE}')" >> $GITHUB_OUTPUT
          echo "version=$(pip show transformers | grep Version)" >> $GITHUB_OUTPUT
      - uses: actions/cache@v4
        with:
          path: ${{ steps.transfo-install.outputs.dir }}
          key: ${{ runner.os }}-transformers-${{ steps.transfo-install.outputs.version }}
          restore-keys: |
            ${{ runner.os }}-transformers-
      - name: Run tox
        run: |
          uv tool install tox --with tox-gh-actions --with tox-uv --python ${{ matrix.python-version }}
          tox -- -v --durations=0
      - name: Upload hypothesis examples database
        uses: actions/upload-artifact@v5
        if: always()
        with:
          name: hypothesis-example-db-py${{ matrix.python-version }}-${{ matrix.os}}
          path: .hypothesis/examples
  build:
    name: Build wheels and sdist
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
          - ubuntu-latest
        python-version:
          - "3.13"
    needs: test
    steps:
      - uses: actions/checkout@v5
      - name: Install uv
        uses: astral-sh/setup-uv@v7
        with:
          cache-suffix: build-py${{ matrix.python-version }}-${{ matrix.os }}
          enable-cache: true
      - name: Build wheels and sdist
        run: uv build --python ${{ matrix.python-version }} --wheel --sdist
      - uses: actions/upload-artifact@v5
        with:
          name: dist-wheel
          path: ./dist/*.whl
  upload_pypi:
    needs: build
    runs-on: ubuntu-latest
    if: >
      (github.event_name == 'release' && github.event.action == 'published')
      || (github.event_name == 'workflow_dispatch' && github.event.inputs.deploy_trigger == 'true')
    environment:
      name: pypi
      url: https://pypi.org/p/hopsparser
    permissions:
      id-token: write
    steps:
      - name: Download all the dists
        uses: actions/download-artifact@v5
        with:
          pattern: dist-*
          path: dist/
          merge-multiple: true
      - name: Publish distribution ðŸ“¦ to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
